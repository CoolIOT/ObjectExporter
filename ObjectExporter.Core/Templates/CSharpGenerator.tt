<#@ template language="C#" #>
<#@ parameter name="objectExpression" type="EnvDTE.Expression" #>
<#@ parameter name="maxDepth" type="System.Int32" #>
<#@ parameter name="excludePrivates" type="System.Boolean" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    if(CanBeExpressedAsSingleType(objectExpression.Type) || objectExpression.DataMembers.Count == 0)
    {
        ExportMembers(objectExpression, 0, true);
    }
    else
    {
        #>var <#= GeneratorHelper.ResolveReservedNames(objectExpression.Name) #> = <#
        ExportMembers(objectExpression, 0, true);
    }
#>;
<#+
    bool isFirstElement = true;

    public void ExportMembers(Expression expression, int recursionLevel, bool isLast)
    {
        //resolved reserved keywords such as class, this becomes @class.
        string expressionName = GeneratorHelper.ResolveReservedNames(expression.Name);
        //members of objects have a type of: object { theType } - Strip out object { }
        string expressionType = GeneratorHelper.StripObjectReference(expression.Type);

        if(!GeneratorHelper.IsSerializable(expressionName))
        {
            return;
        }
        else if(CanBeExpressedAsSingleType(expressionType))
        {
            WriteLine("");
            
            if(GeneratorHelper.IsCollectionMember(expressionName))
            {
                #><#= GetSingleTypeValue(expression) + GeneratorHelper.WriteCommaIfNotLast(isLast) #><#+
            }
            else
            {
                #><#= expressionName #> = <#= GetSingleTypeValue(expression) + GeneratorHelper.WriteCommaIfNotLast(isLast) #><#+
            }
        }
        else if (expression.DataMembers.Count == 0)
        {
            WriteLine("");
            if(GeneratorHelper.IsCollectionMember(expressionName))
            {
                #><#= expression.Value + GeneratorHelper.WriteCommaIfNotLast(isLast) #><#+
            }
            else
            {   
                #><#= expressionName #> = <#= expression.Value + GeneratorHelper.WriteCommaIfNotLast(isLast) #><#+
            }
        }
        else if (expression.DataMembers.Count > 0 && recursionLevel <= maxDepth)
        {
            //used for the very first object (top most) to be completed as var objName = new objType, without a space in between.
            if(isFirstElement)
            {
                isFirstElement = false;
            }
            else
            {
                WriteLine("");
            }

            if(GeneratorHelper.IsTypeOfCollection(expressionType) && !GeneratorHelper.IsCollectionMember(expressionName))
            {
                #><#= expressionName #> = new <#= expressionType #><#+ 
                WriteLine(""); #>{<#+
            }
            else
            {
                #>new <#= expressionType #><#+
                WriteLine(""); #>{<#+
            }

            var expressionList = new List<Expression>();
            foreach(Expression dataMember in expression.DataMembers)
            {
                if(GeneratorHelper.IsSerializable(dataMember.Name))
                {
                    if(excludePrivates)
                    {
                        //check accessibility
                        bool isAccesible = _propertyAccessibilityChecker.IsAccessiblePropertyOrField(dataMember.Name, expressionType);

                        if(isAccesible)
                        {
                            expressionList.Add(dataMember);
                        }
                    }
                    else //Add all (including private)
                    {
                        expressionList.Add(dataMember);
                    }
                }
            }

            foreach(Expression exp in expressionList)
            {
                PushIndent("\t");
                bool isLastItem = expressionList.IsLast(exp);
                ExportMembers(exp, recursionLevel + 1, isLastItem);
                PopIndent();
            }

            WriteLine("");
            #>}<#+
            #><#= GeneratorHelper.WriteCommaIfNotLast(isLast) #><#+
        }
    }
#>